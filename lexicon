#!/bin/bash

# lexicon: A simple yet powerful dictionary at your fingertips in the command-line

# Author: Andrei Biswas
# GitHub: https://www.github.com/codeabiswas
# LinkedIn: https://www.linkedin.com/in/andreibiswas/
# Website: codeabiswas.github.io
# Email: axb6972@rit.edu

# Created On: Sunday May 25, 2019
# Last Modified On: Sunday, May 25, 2019

HOST=wordsapiv1.p.rapidapi.com
KEY=1e3fff475bmsh333df77f00b3bcfp14c73bjsn2bc5d787b883

# This function prints out the examples of the word
function examples (){

    # Fetch and print the first example of the word from the cached GET request
    echo "Example: $(jq '.examples[0]' <<< ${wordInfo})"

}

# This function prints out the synonyms of the word
function synonyms (){

    # Fetch the synonyms of the word from the cached GET request
    synonymList=$(jq -c '.synonyms[]' <<< ${wordInfo})

    echo "Its synonym(s) are:"

    # Seperate each word by the comma
    IFS=, synonymList=(${synonymList})
    # For every word in the synonym list, print it out
    for (( i=0; i<${#synonymList[@]}; i++ ))
    do
        # Fetch and find the definition of the word
        echo "  - ${synonymList[$i]}"
        
    done

}

# This function prints out the part of speech of the word
function partOfSpeech (){

    # Fetch the part of speech of the word from the cached GET request
    ps=$(jq '.partOfSpeech' <<< ${wordInfo} | tr -d '"')

    echo "Part of Speech: ${ps}"

}

# This function defines the word by fetching information from the Word API
function defineWord (){

    # URL setup
    url="https://wordsapiv1.p.rapidapi.com/words/${word}"
    # Fetch the information returned from the GET request and code-readable-prettify it
    wordInfo=$(curl -s ${url} \
    -H "X-RapidAPI-Host: ${HOST}" \
    -H "X-RapidAPI-Key: ${KEY}" | jq -c '.results[]')

    echo "A ${word} means:"

    # Iterate through all the definitions and print it out
    while read wordDefinitions; do

        definition=$(jq '.definition' <<< ${wordDefinitions} | tr -d '"')
        echo "  - ${definition}"
    
    done <<< ${wordInfo}
    
    # Check if the --partOfSpeech flag is set anywhere
    if [[ $* == *"-ps"* ]] || [[ $* == *"--partOfSpeech"* ]]; then
        # Fetch the part of speech
        partOfSpeech
    fi

    # Check if the --example flag is set anywhere
    if [[ $* == *"-e"* ]] || [[ $* == *"--example"* ]]; then
        # Fetch the example
        examples
    fi

    # Check if the --synonym flag is set anywhere
    if [[  $* ==  *"-s"* ]] || [[ $* == *"--synonym"* ]]; then
        # Fetch the synonym
        synonyms
    fi

    # Check if the --antonym flag is set anywhere
    if [[ $* == *"-a"* ]] || [[ $* == *"--antonym"* ]]; then
        # Fetch the antonym
        antonyms
    fi
}

# Get the first argument (the word(s) to define)
wordList=$1

# Remove the '[]' and then seperate each word by the comma
IFS=, wordList=($(tr -d '[]' <<< ${wordList}))
# For every word in the list
for (( i=0; i<${#wordList[@]}; i++ ))
do
    # Fetch and find the definition of the word
    word=${wordList[$i]}
    defineWord $*

done





